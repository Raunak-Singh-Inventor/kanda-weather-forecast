{"version":3,"sources":["Fonts/exo-black-italic.otf","data/forecasts.txt","components/LocationDD.js","components/WeatherDatePicker.js","components/TempCondHumidCard/TempCondHumidCard.js","images/Flood.png","components/FloodRiskCard/FloodRiskCard.js","images/GoodAirQuality.png","images/BadAirQuality.png","components/AirQualityCard/AirQualityCard.js","components/GoogleTranslate.js","images/dayBackground.jpg","images/nightBackground.jpg","App.js","reportWebVitals.js","index.js"],"names":["LocationDD","props","useState","loc","setLoc","style","width","placeholder","formatStyle","onChange","value","onLocationChange","String","label","replace","name","variant","locations","map","location","i","WeatherDatePicker","Date","date","setDate","changed","TempCondHumidCard","className","borderColor","borderWidth","userForecast","Condition","isForecastPresent","fontSize","console","log","fontFamily","Temperature","Humidity","chanceOfRain","FloodRiskCard","uyoNGsmData","accraGHsmData","margin","height","src","FloodImg","size","AirQualityCard","Wind","match","GoodAirQualityImg","BadAirQualityImg","GoogleTranslate","id","theme","rainbow","palette","brand","App","forecasts","setForecasts","isLoaded","setisLoaded","setLocations","locationState","setLocationState","setUserForecast","setIsForecastPresent","setUyoNGsmData","setAccraGHsmData","isDarkMode","setIsDarkMode","bg","setBg","useEffect","fetch","raw_forecasts","then","r","text","forecasts_text","forecasts_arr","split","unshift","forecast_list","forecast_dict","j","length","substr","indexOf","push","locations_list","Location","Array","from","Set","includes","fDate","getFullYear","getMonth","getDate","a","proxyurl","response","json","data","fetchUyoNGsmData","fetchAccraGHsmData","nightBackground","dayBackground","backgroundImage","textAlign","marginRight","marginLeft","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.850d52bf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/exo-black-italic.5113cd68.otf\";","export default __webpack_public_path__ + \"static/media/forecasts.18de50e9.txt\";","import React, { useState } from \"react\";\nimport { Picklist, Option } from \"react-rainbow-components\";\n\nexport const LocationDD = (props) => {\n  const [loc, setLoc] = useState({});\n  return (\n    <div>\n      <Picklist\n        style={{ width: 250 }}\n        placeholder=\"Select A Location\"\n        formatStyle=\"large\"\n        onChange={(value) => {\n          setLoc(value);\n          props.onLocationChange(String(value.label).replace(\",\", \"\"));\n        }}\n        value={loc}\n      >\n        <Option name=\"header\" label=\"Locations\" variant=\"header\" />\n        {props.locations.map((location, i) => (\n          <Option name={String(i)} label={location} />\n        ))}\n      </Picklist>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { DatePicker } from \"react-rainbow-components\";\n\nexport const WeatherDatePicker = (props) => {\n  const [date, setDate] = useState(new Date());\n\n  return (\n    <div>\n      <DatePicker\n        style={{ width: 250 }}\n        formatStyle=\"large\"\n        placeholder=\"Select A Date\"\n        value={date}\n        onChange={(date) => {\n          setDate(date);\n          props.changed(date);\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"react-rainbow-components\";\nimport \"./TempCondHumidCard.css\";\n\nexport default function TempCondHumidCard(props) {\n  return (\n    <Card\n      className=\"card\"\n      style={{ borderColor: \"purple\", borderWidth: 5, width: 400 }}\n    >\n      {props.userForecast.Condition === \"Partly Cloudy\" &&\n      props.isForecastPresent ? (\n        <h1 style={{ fontSize: 200 }}>⛅</h1>\n      ) : (\n        console.log()\n      )}\n      {props.userForecast.Condition === \"Cloudy\" && props.isForecastPresent ? (\n        <h1 style={{ fontSize: 200 }}>☁️</h1>\n      ) : (\n        console.log()\n      )}\n      {props.userForecast.Condition === \"Sunny\" && props.isForecastPresent ? (\n        <h1 style={{ fontSize: 200 }}>☀️</h1>\n      ) : (\n        console.log()\n      )}\n      {props.isForecastPresent ? (\n        <>\n          <h1 style={{ fontFamily: \"ExoMedium\" }} className=\"temp-text\">\n            {props.userForecast.Temperature}\n          </h1>\n          <h1 style={{ fontFamily: \"ExoMedium\" }} className=\"cond-text\">\n            {props.userForecast.Condition}\n          </h1>\n          <h1 style={{ fontFamily: \"ExoMedium\" }} className=\"humidity-text\">\n            💧Humidity: {props.userForecast.Humidity}\n          </h1>\n          <h1 style={{ fontFamily: \"ExoMedium\" }} className=\"rain-text\">\n            🌧️Chance of Rain: {props.userForecast.chanceOfRain}\n          </h1>\n        </>\n      ) : (\n        <h1 style={{ fontFamily: \"ExoMedium\", fontSize: 50 }}>\n          We don't have data for that date and/or location\n        </h1>\n      )}\n    </Card>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/Flood.d82da8e0.png\";","import React from \"react\";\nimport { Card, Spinner } from \"react-rainbow-components\";\nimport FloodImg from \"../../images/Flood.png\";\n\nexport default function FloodRiskCard(props) {\n  console.log(\"Uyo, NG Soil Moisture Data: \", props.uyoNGsmData);\n  console.log(\"Accra, GH Soil Moisture Data: \", props.accraGHsmData);\n  if (\n    props.location === \"Uyo NG\" &&\n    props.uyoNGsmData !== \"[object Object]\" &&\n    props.uyoNGsmData !== \"undefined\"\n  ) {\n    return (\n      <Card\n        style={{\n          width: 600,\n          margin: 15,\n          borderColor: \"purple\",\n          borderWidth: 5,\n        }}\n      >\n        <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n          Soil Moisture: {props.uyoNGsmData}\n        </h1>\n        {props.uyoNGsmData > 10 ? (\n          <>\n            <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n              High Flood Risk\n            </h1>\n            <img style={{ width: 100, height: 100 }} src={FloodImg} />\n          </>\n        ) : (\n          <>\n            <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n              Low Flood Risk\n            </h1>\n            <h1 style={{ fontSize: 100 }}>👍</h1>\n          </>\n        )}\n      </Card>\n    );\n  } else if (\n    props.location === \"Accra GH\" &&\n    props.accraGHsmData !== \"[object Object]\" &&\n    props.accraGHsmData !== \"undefined\"\n  ) {\n    return (\n      <Card\n        style={{\n          width: 600,\n          margin: 15,\n          borderColor: \"purple\",\n          borderWidth: 5,\n        }}\n      >\n        <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n          Soil Moisture: {props.accraGHsmData}\n        </h1>\n        {props.accraGHsmData > 10 ? (\n          <>\n            <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n              High Flood Risk\n            </h1>\n            <img style={{ width: 100, height: 100 }} src={FloodImg} />\n          </>\n        ) : (\n          <>\n            <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n              Low Flood Risk\n            </h1>\n            <h1 style={{ fontSize: 100 }}>👍</h1>\n          </>\n        )}\n      </Card>\n    );\n  } else {\n    return (\n      <Card\n        style={{\n          width: 600,\n          height: 100,\n          margin: 15,\n          borderColor: \"purple\",\n          borderWidth: 5,\n        }}\n      >\n        <Spinner size=\"large\" />\n      </Card>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/GoodAirQuality.2bc89c4e.png\";","export default __webpack_public_path__ + \"static/media/BadAirQuality.26d6a4f2.png\";","import React from \"react\";\nimport { Card } from \"react-rainbow-components\";\nimport GoodAirQualityImg from \"../../images/GoodAirQuality.png\";\nimport BadAirQualityImg from \"../../images/BadAirQuality.png\";\n\nexport default function AirQualityCard(props) {\n  return (\n    <Card style={{ margin: 15, borderColor: \"purple\", borderWidth: 5 }}>\n      {props.isForecastPresent ? (\n        <>\n          <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n            💨Wind: {props.userForecast.Wind}\n          </h1>\n          {props.userForecast.Wind !== \"Unknown\" ? (\n            props.userForecast.Wind.match(/\\d+/) > 5 ? (\n              <>\n                <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n                  Good Air Quality\n                </h1>\n                <img\n                  style={{ width: 100, height: 100 }}\n                  src={GoodAirQualityImg}\n                />\n              </>\n            ) : (\n              <>\n                <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n                  Bad Air Quality\n                </h1>\n                <img\n                  style={{ width: 100, height: 100 }}\n                  src={BadAirQualityImg}\n                />\n              </>\n            )\n          ) : (\n            <>\n              <h1 style={{ fontSize: 50, fontFamily: \"ExoMedium\" }}>\n                Air Quality: Unknown\n              </h1>\n              <h1 style={{ fontSize: 100, fontFamily: \"ExoMedium\" }}>🤔</h1>\n            </>\n          )}\n        </>\n      ) : (\n        <h1 style={{ fontFamily: \"ExoMedium\", fontSize: 50 }}>\n          We don't have data for that date and/or location\n        </h1>\n      )}\n    </Card>\n  );\n}\n","import React from \"react\";\n\nconst GoogleTranslate = (props) => {\n  return <div id=\"google_translate_element\"></div>;\n};\n\nexport default GoogleTranslate;\n","export default __webpack_public_path__ + \"static/media/dayBackground.8066f63e.jpg\";","export default __webpack_public_path__ + \"static/media/nightBackground.a0ef28dc.jpg\";","import { useEffect, useState } from \"react\";\nimport raw_forecasts from \"../src/data/forecasts.txt\";\nimport { Application, CheckboxToggle, Spinner } from \"react-rainbow-components\";\nimport { LocationDD } from \"./components/LocationDD\";\nimport { WeatherDatePicker } from \"./components/WeatherDatePicker\";\nimport TempCondHumidCard from \"./components/TempCondHumidCard/TempCondHumidCard\";\nimport FloodRiskCard from \"./components/FloodRiskCard/FloodRiskCard\";\nimport AirQualityCard from \"./components/AirQualityCard/AirQualityCard\";\nimport GoogleTranslate from \"./components/GoogleTranslate\";\nimport dayBackground from \"./images/dayBackground.jpg\";\nimport nightBackground from \"./images/nightBackground.jpg\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst theme = {\n  rainbow: {\n    palette: {\n      brand: \"rgba(197, 21, 234, 1)\",\n    },\n  },\n};\n\nfunction App() {\n  const [forecasts, setForecasts] = useState([]);\n  const [isLoaded, setisLoaded] = useState(false);\n  const [locations, setLocations] = useState([]);\n  const [date, setDate] = useState(new Date());\n  const [locationState, setLocationState] = useState(\"?\");\n  const [userForecast, setUserForecast] = useState({});\n  const [isForecastPresent, setIsForecastPresent] = useState(false);\n  const [uyoNGsmData, setUyoNGsmData] = useState({});\n  const [accraGHsmData, setAccraGHsmData] = useState({});\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [bg, setBg] = useState(\"\");\n\n  const getData = () => {\n    // fetch the forecasts/hindcasts from the txt and convert the data into a dict object\n    fetch(raw_forecasts)\n      .then((r) => r.text())\n      .then((forecasts_text) => {\n        let forecasts_arr = forecasts_text.split(\"\\n\");\n        forecasts_arr.unshift(\"\");\n        let forecast_list = [];\n        let forecast_dict = {};\n        for (var j = 0; j < forecasts_arr.length; j++) {\n          if (forecasts_arr[j] === \"\") {\n            forecast_dict[\"Location\"] = forecasts_arr[j + 1].substr(\n              0,\n              forecasts_arr[j + 1].indexOf(\":\")\n            );\n            forecast_dict[\"Date\"] = forecasts_arr[j + 1].substr(\n              forecasts_arr[j + 1].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Pressure\"] = forecasts_arr[j + 2].substr(\n              forecasts_arr[j + 2].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Temperature\"] = forecasts_arr[j + 3].substr(\n              forecasts_arr[j + 3].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Humidity\"] = forecasts_arr[j + 4].substr(\n              forecasts_arr[j + 4].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Condition\"] = forecasts_arr[j + 5].substr(\n              forecasts_arr[j + 5].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Wind\"] = forecasts_arr[j + 6].substr(\n              forecasts_arr[j + 6].indexOf(\":\") + 2\n            );\n            forecast_dict[\"chanceOfRain\"] = forecasts_arr[j + 7].substr(\n              forecasts_arr[j + 7].indexOf(\":\") + 2\n            );\n            forecast_list.push(forecast_dict);\n          } else {\n            forecast_dict = {};\n          }\n        }\n        setForecasts(forecast_list);\n        setisLoaded(true);\n      });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    // get the locations from the forecasts dict to display in location dropdown (LocationDD)\n    let locations_list = [];\n    for (var i = 0; i < forecasts.length; i++) {\n      locations_list.push(forecasts[i].Location);\n    }\n    setLocations(Array.from(new Set(locations_list)));\n  }, [forecasts]);\n\n  useEffect(() => {\n    // find if date and location picked by user are present in forecasts dict\n    for (var i = 0; i < forecasts.length; i++) {\n      if (\n        String(date).includes(\n          String(forecasts[i].Date)\n            .replace(\",\", \"\")\n            .replace(\"January\", \"Jan\")\n            .replace(\"February\", \"Feb\")\n            .replace(\"March\", \"Mar\")\n            .replace(\"April\", \"Apr\")\n            .replace(\"June\", \"Jun\")\n            .replace(\"July\", \"Jul\")\n            .replace(\"August\", \"Aug\")\n            .replace(\"September\", \"Sep\")\n            .replace(\"October\", \"Oct\")\n            .replace(\"November\", \"Nov\")\n            .replace(\"December\", \"Dec\")\n            .replace(\" 1 \", \" 01 \")\n            .replace(\" 2 \", \" 02 \")\n            .replace(\" 3 \", \" 03 \")\n            .replace(\" 4 \", \" 04 \")\n            .replace(\" 5 \", \" 05 \")\n            .replace(\" 6 \", \" 06 \")\n            .replace(\" 7 \", \" 07 \")\n            .replace(\" 8 \", \" 08 \")\n            .replace(\" 9 \", \" 09 \")\n        ) === true &&\n        locationState === forecasts[i].Location.replace(\",\", \"\")\n      ) {\n        setUserForecast(forecasts[i]);\n        setIsForecastPresent(true);\n        return;\n      } else {\n        setIsForecastPresent(false);\n      }\n    }\n  }, [date, locationState, forecasts]);\n\n  useEffect(() => {\n    // Grab the soil moisture data from the dClimate API for the picked date\n    var fDate =\n      date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\n    fDate = fDate\n      .replace(\"-1\", \"-01\")\n      .replace(\"-2\", \"-02\")\n      .replace(\"-3\", \"-03\")\n      .replace(\"-4\", \"-04\")\n      .replace(\"-5\", \"-05\")\n      .replace(\"-6\", \"-06\")\n      .replace(\"-7\", \"-07\")\n      .replace(\"-8\", \"-08\")\n      .replace(\"-9\", \"-09\");\n\n    async function fetchUyoNGsmData() {\n      setUyoNGsmData({});\n      // the CORS server is needed in development and Github Pages to communicate with the dClimate API\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      const url =\n        \"https://api.dclimate.net/apiv2/grid-history/era5_volumetric_soil_water_layer_1-hourly/5.6901705_-0.2099204?also_return_metadata=false&use_imperial_units=true&also_return_snapped_coordinates=true&convert_to_local_time=true\";\n      let response = await fetch(proxyurl + url);\n      response = await response.json();\n      setUyoNGsmData(response.data[fDate + \" 00:00:00+00:00\"]);\n    }\n    async function fetchAccraGHsmData() {\n      setAccraGHsmData({});\n      // the CORS server is needed in development and Github Pages to communicate with the dClimate API\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      const url =\n        \"https://api.dclimate.net/apiv2/grid-history/era5_volumetric_soil_water_layer_1-hourly/5.0405866_7.9194225?also_return_metadata=false&use_imperial_units=true&also_return_snapped_coordinates=true&convert_to_local_time=true\";\n      let response = await fetch(proxyurl + url);\n      response = await response.json();\n      setAccraGHsmData(response.data[fDate + \" 00:00:00+01:00\"]);\n    }\n    fetchUyoNGsmData();\n    fetchAccraGHsmData();\n  }, [date]);\n\n  const onLocationChange = (value) => {\n    setLocationState(value);\n  };\n\n  useEffect(() => {\n    // sets the background depending on whether it is dark mode or not\n    isDarkMode ? setBg(nightBackground) : setBg(dayBackground);\n  }, [isDarkMode]);\n\n  // isLoaded is true if the data from the txt has been put in the forecasts dict\n  if (isLoaded) {\n    return (\n      <div style={{ height: 1000, backgroundImage: `url(${bg})` }}>\n        <Application style={{ textAlign: \"center\" }} theme={theme}>\n          <div className=\"row\">\n            <div className=\"col-md-3\">\n              <GoogleTranslate />\n            </div>\n            <h1 className=\"title col-md-6\">Kanda Weather Forecast</h1>\n            <div className=\"col-md-3\">\n              <CheckboxToggle\n                value={isDarkMode}\n                onChange={() => {\n                  setIsDarkMode(!isDarkMode);\n                }}\n              />\n              {isDarkMode ? (\n                <h1 style={{ fontSize: 40 }}>🌛</h1>\n              ) : (\n                <h1 style={{ fontSize: 40 }}>🌞</h1>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-4\"></div>\n            <div className=\"col-md-2\" style={{ marginRight: 5 }}>\n              <WeatherDatePicker changed={setDate} />\n            </div>\n            <div className=\"col-md-2\" style={{ marginLeft: 5 }}>\n              <LocationDD\n                onLocationChange={onLocationChange}\n                locations={locations}\n              />\n            </div>\n            <div className=\"col-md-4\"></div>\n          </div>\n          <div className=\"rainbow-align-content_center rainbow-p-around_medium\">\n            <TempCondHumidCard\n              isForecastPresent={isForecastPresent}\n              userForecast={userForecast}\n            />\n            <div className=\"rainbow-p-around_medium\">\n              <FloodRiskCard\n                uyoNGsmData={String(uyoNGsmData)}\n                accraGHsmData={String(accraGHsmData)}\n                location={locationState}\n              />\n              <AirQualityCard\n                isForecastPresent={isForecastPresent}\n                userForecast={userForecast}\n              />\n            </div>\n          </div>\n          {isDarkMode ? (\n            <h4 style={{ color: \"white\" }}>\n              Made with ❤️ in React by Raunak Singh\n            </h4>\n          ) : (\n            <h4>Made with ❤️ in React by Raunak Singh</h4>\n          )}\n        </Application>\n      </div>\n    );\n  } else if (!isLoaded) {\n    return <Spinner size=\"x-large\" />;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Fonts/exo-black-italic.otf\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}