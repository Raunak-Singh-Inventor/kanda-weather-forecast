{"version":3,"sources":["Fonts/exo-black-italic.otf","data/forecasts.txt","components/LocationDD.js","components/WeatherDatePicker.js","components/TempCondHumidCard/TempCondHumidCard.js","components/FloodRiskCard/FloodRiskCard.js","components/AirQualityCard/AirQualityCard.js","App.js","reportWebVitals.js","index.js"],"names":["LocationDD","props","useState","loc","setLoc","className","placeholder","formatStyle","onChange","value","onLocationChange","String","label","replace","name","variant","locations","map","location","i","WeatherDatePicker","Date","date","setDate","changed","TempCondHumidCard","style","width","isForecastPresent","userForecast","Temperature","Condition","Humidity","chanceOfRain","FloodRiskCard","console","log","uyoNGsmData","accraGHsmData","margin","fontSize","AirQualityCard","Wind","match","theme","rainbow","palette","brand","App","forecasts","setForecasts","isLoaded","setisLoaded","setLocations","locationState","setLocationState","setUserForecast","setIsForecastPresent","setUyoNGsmData","setAccraGHsmData","useEffect","fetch","raw_forecasts","then","r","text","forecasts_text","forecasts_arr","split","unshift","forecast_list","forecast_dict","j","length","substr","indexOf","push","locations_list","Location","Array","from","Set","includes","fDate","getFullYear","getMonth","getDate","a","response","json","data","fetchUyoNGsmData","fetchAccraGHsmData","textAlign","alignItems","justifyContent","display","flexDirection","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e30c82b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/exo-black-italic.5113cd68.otf\";","export default __webpack_public_path__ + \"static/media/forecasts.18de50e9.txt\";","import React, { useState } from \"react\";\nimport { Picklist, Option } from \"react-rainbow-components\";\n\nexport const LocationDD = (props) => {\n  const [loc, setLoc] = useState({});\n  return (\n    <div className=\"rainbow-m-around_small\">\n      <Picklist\n        placeholder=\"Select A Location\"\n        formatStyle=\"large\"\n        onChange={(value) => {\n          setLoc(value)\n          props.onLocationChange(String(value.label).replace(\",\", \"\"));\n        }}\n        value={loc}\n      >\n        <Option name=\"header\" label=\"Locations\" variant=\"header\" />\n        {props.locations.map((location, i) => (\n          <Option name={String(i)} label={location} />\n        ))}\n      </Picklist>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { DatePicker } from \"react-rainbow-components\";\n\nexport const WeatherDatePicker = (props) => {\n  const [date, setDate] = useState(new Date());\n\n  return (\n    <div className=\"rainbow-m-around_medium\">\n      <DatePicker\n        formatStyle=\"large\"\n        placeholder=\"Select A Date\"\n        value={date}\n        onChange={(date) => {\n          setDate(date);\n          props.changed(date);\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"react-rainbow-components\";\nimport \"./TempCondHumidCard.css\";\n\nexport default function TempCondHumidCard(props) {\n  return (\n    <Card className=\"card\" style={{ width: 350 }}>\n      {props.isForecastPresent ? (\n        <>\n          <h1 className=\"temp-text\">{props.userForecast.Temperature}</h1>\n          <h1 className=\"cond-text\">{props.userForecast.Condition}</h1>\n          <h1 className=\"humidity-text\">Humidity: {props.userForecast.Humidity}</h1>\n          <h1 className=\"rain-text\">Chance of Rain: {props.userForecast.chanceOfRain}</h1>\n        </>\n      ) : (\n        <h1 className=\"temp-text\">Sorry</h1>\n      )}\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-rainbow-components\";\n\nexport default function FloodRiskCard(props) {\n  console.log(\"Uyo, NG Soil Moisture Data: \", props.uyoNGsmData);\n  console.log(\"Accra, GH Soil Moisture Data: \", props.accraGHsmData);\n  if (\n    props.location === \"Uyo NG\" &&\n    props.uyoNGsmData !== \"[object Object]\" &&\n    props.uyoNGsmData !== \"undefined\"\n  ) {\n    return (\n      <Card style={{ width: 1000, margin: 15 }}>\n        <h1 style={{ fontSize: 50 }}>Soil Moisture: {props.uyoNGsmData}</h1>\n        {props.uyoNGsmData > 10 ? (\n          <h1 style={{ fontSize: 50 }}>Flood Risk</h1>\n        ) : (\n          <h1 style={{ fontSize: 50 }}>No Flood Risk</h1>\n        )}\n      </Card>\n    );\n  } else if (\n    props.location === \"Accra GH\" &&\n    props.accraGHsmData !== \"[object Object]\" &&\n    props.accraGHsmData !== \"undefined\"\n  ) {\n    return (\n      <Card style={{ width: 1000, margin: 15 }}>\n        <h1 style={{ fontSize: 50 }}>Soil Moisture: {props.accraGHsmData}</h1>\n        {props.accraGHsmData > 10 ? (\n          <h1 style={{ fontSize: 50 }}>Flood Risk</h1>\n        ) : (\n          <h1 style={{ fontSize: 50 }}>No Flood Risk</h1>\n        )}\n      </Card>\n    );\n  } else {\n    return (\n      <Card style={{ width: 1000, margin: 15 }}>\n        <h1>Loading</h1>\n      </Card>\n    );\n  }\n}\n","import React from \"react\";\nimport { Card } from \"react-rainbow-components\";\n\nexport default function AirQualityCard(props) {\n  return (\n    <Card style={{ width: 1000, margin: 15 }}>\n      {props.isForecastPresent ? (\n        <>\n          <h1 style={{ fontSize: 50 }}>Wind: {props.userForecast.Wind}</h1>\n          {props.userForecast.Wind.match(/\\d+/) > 10 ? (\n            <h1 style={{ fontSize: 50 }}>Good Air Quality</h1>\n          ) : (\n            <h1 style={{ fontSize: 50 }}>Bad Air Quality</h1>\n          )}\n        </>\n      ) : (\n        <h1>Sorry</h1>\n      )}\n    </Card>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport raw_forecasts from \"../src/data/forecasts.txt\";\nimport { Application } from \"react-rainbow-components\";\nimport { LocationDD } from \"./components/LocationDD\";\nimport { WeatherDatePicker } from \"./components/WeatherDatePicker\";\nimport TempCondHumidCard from \"./components/TempCondHumidCard/TempCondHumidCard\";\nimport FloodRiskCard from \"./components/FloodRiskCard/FloodRiskCard\";\nimport AirQualityCard from \"./components/AirQualityCard/AirQualityCard\";\nimport \"./App.css\";\n\nconst theme = {\n  rainbow: {\n    palette: {\n      brand: \"rgba(197, 21, 234, 1)\",\n    },\n  },\n};\n\nfunction App() {\n  const [forecasts, setForecasts] = useState([]);\n  const [isLoaded, setisLoaded] = useState(false);\n  const [locations, setLocations] = useState([]);\n  const [date, setDate] = useState(new Date());\n  const [locationState, setLocationState] = useState(\"?\");\n  const [userForecast, setUserForecast] = useState({});\n  const [isForecastPresent, setIsForecastPresent] = useState(false);\n  const [uyoNGsmData, setUyoNGsmData] = useState({});\n  const [accraGHsmData, setAccraGHsmData] = useState({});\n\n  const getData = () => {\n    fetch(raw_forecasts)\n      .then((r) => r.text())\n      .then((forecasts_text) => {\n        let forecasts_arr = forecasts_text.split(\"\\n\");\n        forecasts_arr.unshift(\"\");\n        let forecast_list = [];\n        let forecast_dict = {};\n        for (var j = 0; j < forecasts_arr.length; j++) {\n          if (forecasts_arr[j] === \"\") {\n            forecast_dict[\"Location\"] = forecasts_arr[j + 1].substr(\n              0,\n              forecasts_arr[j + 1].indexOf(\":\")\n            );\n            forecast_dict[\"Date\"] = forecasts_arr[j + 1].substr(\n              forecasts_arr[j + 1].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Pressure\"] = forecasts_arr[j + 2].substr(\n              forecasts_arr[j + 2].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Temperature\"] = forecasts_arr[j + 3].substr(\n              forecasts_arr[j + 3].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Humidity\"] = forecasts_arr[j + 4].substr(\n              forecasts_arr[j + 4].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Condition\"] = forecasts_arr[j + 5].substr(\n              forecasts_arr[j + 5].indexOf(\":\") + 2\n            );\n            forecast_dict[\"Wind\"] = forecasts_arr[j + 6].substr(\n              forecasts_arr[j + 6].indexOf(\":\") + 2\n            );\n            forecast_dict[\"chanceOfRain\"] = forecasts_arr[j + 7].substr(\n              forecasts_arr[j + 7].indexOf(\":\") + 2\n            );\n            forecast_list.push(forecast_dict);\n          } else {\n            forecast_dict = {};\n          }\n        }\n        setForecasts(forecast_list);\n        setisLoaded(true);\n      });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    let locations_list = [];\n    for (var i = 0; i < forecasts.length; i++) {\n      locations_list.push(forecasts[i].Location);\n    }\n    setLocations(Array.from(new Set(locations_list)));\n  }, [forecasts]);\n\n  useEffect(() => {\n    for (var i = 0; i < forecasts.length; i++) {\n      if (\n        String(date).includes(\n          String(forecasts[i].Date)\n            .replace(\",\", \"\")\n            .replace(\"January\", \"Jan\")\n            .replace(\"February\", \"Feb\")\n            .replace(\"March\", \"Mar\")\n            .replace(\"April\", \"Apr\")\n            .replace(\"June\", \"Jun\")\n            .replace(\"July\", \"Jul\")\n            .replace(\"August\", \"Aug\")\n            .replace(\"September\", \"Sep\")\n            .replace(\"October\", \"Oct\")\n            .replace(\"November\", \"Nov\")\n            .replace(\"December\", \"Dec\")\n            .replace(\" 1 \", \" 01 \")\n            .replace(\" 2 \", \" 02 \")\n            .replace(\" 3 \", \" 03 \")\n            .replace(\" 4 \", \" 04 \")\n            .replace(\" 5 \", \" 05 \")\n            .replace(\" 6 \", \" 06 \")\n            .replace(\" 7 \", \" 07 \")\n            .replace(\" 8 \", \" 08 \")\n            .replace(\" 9 \", \" 09 \")\n        ) === true &&\n        locationState === forecasts[i].Location.replace(\",\", \"\")\n      ) {\n        setUserForecast(forecasts[i]);\n        setIsForecastPresent(true);\n        return;\n      } else {\n        setIsForecastPresent(false);\n      }\n    }\n  }, [date, locationState, forecasts]);\n\n  useEffect(() => {\n    var fDate =\n      date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\n    fDate = fDate\n      .replace(\"-1\", \"-01\")\n      .replace(\"-2\", \"-02\")\n      .replace(\"-3\", \"-03\")\n      .replace(\"-4\", \"-04\")\n      .replace(\"-5\", \"-05\")\n      .replace(\"-6\", \"-06\")\n      .replace(\"-7\", \"-07\")\n      .replace(\"-8\", \"-08\")\n      .replace(\"-9\", \"-09\");\n\n    async function fetchUyoNGsmData() {\n      setUyoNGsmData({});\n      const proxyurl = \"\";\n      const url =\n        \"https://api.dclimate.net/apiv2/grid-history/era5_volumetric_soil_water_layer_1-hourly/5.6901705_-0.2099204?also_return_metadata=false&use_imperial_units=true&also_return_snapped_coordinates=true&convert_to_local_time=true\";\n      let response = await fetch(proxyurl + url);\n      response = await response.json();\n      setUyoNGsmData(response.data[fDate + \" 00:00:00+00:00\"]);\n    }\n    async function fetchAccraGHsmData() {\n      setAccraGHsmData({});\n      const proxyurl = \"\";\n      const url =\n        \"https://api.dclimate.net/apiv2/grid-history/era5_volumetric_soil_water_layer_1-hourly/5.0405866_7.9194225?also_return_metadata=false&use_imperial_units=true&also_return_snapped_coordinates=true&convert_to_local_time=true\";\n      let response = await fetch(proxyurl + url);\n      response = await response.json();\n      setAccraGHsmData(response.data[fDate + \" 00:00:00+01:00\"]);\n    }\n    fetchUyoNGsmData();\n    fetchAccraGHsmData();\n  }, [date]);\n\n  const onLocationChange = (value) => {\n    setLocationState(value);\n  };\n\n  if (isLoaded) {\n    return (\n      <Application style={{ textAlign: \"center\" }} theme={theme}>\n        <h1 className=\"title\">gh-pages is WORKING</h1>\n        <div\n          style={{\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            display: \"flex\",\n            flexDirection: \"row\",\n          }}\n        >\n          <WeatherDatePicker changed={setDate} />\n          <LocationDD\n            onLocationChange={onLocationChange}\n            locations={locations}\n          />\n        </div>\n        <div className=\"rainbow-align-content_center rainbow-p-around_medium\">\n          <TempCondHumidCard\n            isForecastPresent={isForecastPresent}\n            userForecast={userForecast}\n          />\n          <div className=\"rainbow-p-around_medium\">\n            <FloodRiskCard\n              uyoNGsmData={String(uyoNGsmData)}\n              accraGHsmData={String(accraGHsmData)}\n              location={locationState}\n            />\n            <AirQualityCard\n              isForecastPresent={isForecastPresent}\n              userForecast={userForecast}\n            />\n          </div>\n        </div>\n      </Application>\n    );\n  } else if (!isLoaded) {\n    return <h1>Loading</h1>;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Fonts/exo-black-italic.otf\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}